import{_ as s,c as n,o as e,af as p}from"./chunks/framework.DNNKou40.js";const u=JSON.parse('{"title":"🏷️ プロンプトの構造化","description":"","frontmatter":{},"headers":[],"relativePath":"プロンプトの構造化.md","filePath":"プロンプトの構造化.md"}'),l={name:"プロンプトの構造化.md"};function i(t,a,o,c,r,d){return e(),n("div",null,a[0]||(a[0]=[p(`<h1 id="プロンプトの構造化" tabindex="-1">🏷️ プロンプトの構造化 <a class="header-anchor" href="#プロンプトの構造化" aria-label="Permalink to &quot;:label: プロンプトの構造化&quot;">​</a></h1><p>ここではプロンプトを構造化して、ChatGPT にプロンプトの意図を明確に伝える方法を紹介します。</p><p>プロンプトを構造化することで、AI に対して適切な情報を提供し、より正確な出力を得ることができます。</p><div class="info custom-block"><p class="custom-block-title">ポイント</p><p>プロンプトを構造化する方法として、以下の 3 つのポイントを押さえておきましょう。</p><ol><li><p><strong>指示</strong><br> ChatGPT に依頼したいタスクや出力結果を明確に伝えるために、簡単かつ明確な質問をプロンプトに含めます。<br> 例：要約してください、分類してください、回答してくださいなど。</p></li><li><p><strong>与える情報</strong><br> どこからどこまでが文章の要約や追加情報なのかを明確に示すことで、ChatGPT に適切な出力を促します。<br> 例：web サイトの情報、関連する記事、メールの内容など。</p></li><li><p><strong>制約</strong><br> ChatGPT の出力に制約を設けることで、不適切な出力を防ぎ、より適切な回答を得ることができます。<br> 例：特定のキーワードを含める、特定の形式で回答する、特定の長さに収めるなど。</p></li></ol></div><p>プロンプトを構造化するには、マークダウン記法を使うことで、見出しやリストを使って情報を整理することができます。</p><p><a href="https://www.markdownguide.org/basic-syntax/" target="_blank" rel="noreferrer">こちらの記事</a>を参考に、マークダウン記法の基本を学んでみましょう。</p><h3 id="参考-よく使われるマークダウン記法" tabindex="-1">参考: よく使われるマークダウン記法 <a class="header-anchor" href="#参考-よく使われるマークダウン記法" aria-label="Permalink to &quot;参考: よく使われるマークダウン記法&quot;">​</a></h3><ul><li>見出し: <code>#</code> を使って見出しを作成します。見出しのレベルは、<code>#</code> の数で指定します。 <ul><li>例：<code># 見出し</code></li><li>例：<code>## 見出し</code></li><li>例：<code>### 見出し</code></li></ul></li><li>リスト: <code>-</code> を使ってリストを作成します。 <ul><li>例：<code>- リスト項目</code></li></ul></li><li>コードブロック: <code>\`\`\`</code> で囲むことで、コードブロックを作成します。 <ul><li>例：<div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        print(&quot;Hello, World!&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`\`\`</span></span></code></pre></div></li></ul></li></ul><h2 id="例題" tabindex="-1">🔰 例題 <a class="header-anchor" href="#例題" aria-label="Permalink to &quot;:beginner: 例題&quot;">​</a></h2><p>マークダウン記法で構造化したプロンプトを入力して、AI にニュース記事の要約を依頼してみましょう。</p><h3 id="プロンプト" tabindex="-1">📝 プロンプト <a class="header-anchor" href="#プロンプト" aria-label="Permalink to &quot;:pencil: プロンプト&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>以下の文章を要約してください。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 要約対象</span></span>
<span class="line"><span>搭乗口にて手荷物を自動解析　収納棚の占有スペース推定</span></span>
<span class="line"><span>JALとNECは、機内持ち込み手荷物をAIで解析する「NEC Baggage Counting Solution」の実証実験を行いました。</span></span>
<span class="line"><span>搭乗口にて手荷物の個数と種類を自動解析し、積載量を推定するソリューションは世界初とのことです。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>実験は、2024年4〜9月の期間中に、羽田空港第1ターミナルの13番搭乗口にて実施されました。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>手順としては、まず搭乗口に設置されたカメラの映像から、AIが搭乗者が持つ機内持ち込み手荷物を検知します。</span></span>
<span class="line"><span>次に、登録されている種別に沿って手荷物を分類し、機内の収納棚をどれくらい占有するか、リアルタイムで推定します。</span></span>
<span class="line"><span>そして、推定積載量があらかじめ設定した閾値に達したら、アラートを出すとのことです。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>手荷物の解析精度と、収納棚の許容量超過を知らせるアラートタイミングを検証することで、本ソリューションの有用性が評価されました。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 制約</span></span>
<span class="line"><span>- 3文で要約してください。</span></span>
<span class="line"><span>- 専門用語を適切に説明して、簡潔にまとめてください。</span></span>
<span class="line"><span>- 要約の際には、個人名や企業名は含めないでください。</span></span></code></pre></div><p>引用: <a href="https://honichi.com/news/2024/12/04/ai_baggageinspection/" target="_blank" rel="noreferrer">世界初、AIで機内持ち込み手荷物を解析　JALとNECが実証実験</a></p><h3 id="生成例" tabindex="-1">🪄 生成例 <a class="header-anchor" href="#生成例" aria-label="Permalink to &quot;:magic_wand: 生成例&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2024年4月から9月にかけて行われた実験では、AIを利用して搭乗口で手荷物の個数と種類を自動解析し、収納棚の占有スペースを推定しました。</span></span>
<span class="line"><span>カメラ映像を元に手荷物を検知し、分類後にリアルタイムで積載量を計算し、許容量を超えた場合にアラートを出します。</span></span>
<span class="line"><span>この実証実験により、解析精度とアラートタイミングの有用性が確認されました。</span></span></code></pre></div><h3 id="チェック" tabindex="-1">✅ チェック！ <a class="header-anchor" href="#チェック" aria-label="Permalink to &quot;:white_check_mark: チェック！&quot;">​</a></h3><p>以下のチェックリストを確認してみましょう。</p><p>☑️ マークダウン記法とは何か理解できましたか？<br> ☑️ プロンプトを構造化することで、AI の出力が適切になりましたか？</p>`,18)]))}const b=s(l,[["render",i]]);export{u as __pageData,b as default};
